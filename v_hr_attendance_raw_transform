/* In this view, I will calculate all metrics relate to check-in/check-out data: check_in, check_out, working_days, worked_hours, in_late, out_early. Note that, each employee has a different working calendar. */

CREATE OR REPLACE VIEW public.v_hr_attendance_raw_transform AS 

WITH hr_attendance_raw_1 AS ( -- because of having imported data, I have to clean them.
         SELECT 
                  i.id
                  , CASE
                           WHEN i.check_in_hour = '' THEN NULL
                           ELSE i.check_in_hour
                  END AS check_in_hour
                  , CASE
                           WHEN i.check_out_hour = '' THEN NULL
                           ELSE i.check_out_hour
                  END AS check_out_hour
                  , i.check_in_address
                  , i.check_out_address
                  , i.date
                  , i.create_date
                  , i.write_date
                  , i.employee_code
                  , i.company_id
         FROM hr_attendance_raw i
         WHERE i.write_date > (SELECT latest_success_time - '1 day'::interval -- get data having change from 1 day ago to calculate
                                    FROM x_job_increment_flag
                                    WHERE table_name = 'hr_attendance_raw' AND job_name = 'hr_attendance')
)

, hr_attendance_raw_2 AS ( -- second data cleaning
         SELECT 
                  i.id
                  , CASE
                    WHEN split_part(i.check_in_hour, ':', 1) = '' THEN '00'
                    WHEN split_part(i.check_in_hour, ':', 1) > 23 THEN '00'
                    ELSE split_part(i.check_in_hour, ':', 1) -- there is a case: HR imported this hour "25:70", so that I must transform them.
                END AS check_in_hour_hour
                  , CASE
                    WHEN split_part(i.check_in_hour, ':', 2) = '' THEN '00'
                    WHEN split_part(i.check_in_hour, ':', 2) > 59 THEN '00'
                    ELSE split_part(i.check_in_hour, ':', 2)
                END AS check_in_hour_minute
                  , CASE
                    WHEN split_part(i.check_out_hour, ':', 1) = '' THEN '00'
                    WHEN split_part(i.check_out_hour, ':', 1) > 23 THEN '00'
                    ELSE split_part(i.check_out_hour, ':', 1)
                END AS check_out_hour_hour
                  , CASE
                    WHEN split_part(i.check_out_hour, ':', 2) = '' THEN '00'
                    WHEN split_part(i.check_out_hour, ':', 2) > 59 THEN '00'
                    ELSE split_part(i.check_out_hour, ':', 2)
                END AS check_out_hour_minute
                  , i.check_in_address
                  , i.check_out_address
                  , i.date
                  , i.create_date
                  , i.write_date
                  , i.employee_code::integer AS employee_code
                  , i.company_id
         FROM hr_attendance_raw_1 i
         WHERE i.date IS NOT NULL
)

, hr_attendance_raw_3 AS (
         SELECT 
         i.id
         , ((i.check_in_hour_hour || ':') || i.check_in_hour_minute)::time without time zone AS check_in_hour -- merge hours and minutes
         , ((i.check_out_hour_hour || ':') || i.check_out_hour_minute)::time without time zone AS check_out_hour
         , i.check_in_address
         , i.check_out_address
         , i.date
         , i.create_date
         , i.write_date
         , i.hrm_code
         , i.machine_id_in
         , i.machine_id_out
         , i.company_id
         FROM hr_attendance_raw_2 i
)

, ci_co AS ( -- get min (check_in_hour) and max(check_out_hour)
         SELECT 
         , a.employee_code
         , a.date
         , CASE
                  WHEN to_char(a.date, 'Day') = 'Monday   ' THEN '0'
                  WHEN to_char(a.date, 'Day') = 'Tuesday  ' THEN '1'
                  WHEN to_char(a.date, 'Day') = 'Wednesday' THEN '2'
                  WHEN to_char(a.date, 'Day') = 'Thursday ' THEN '3'
                  WHEN to_char(a.date, 'Day') = 'Friday   ' THEN '4'
                  WHEN to_char(a.date, 'Day') = 'Saturday ' THEN '5'
                  ELSE '6'
         END AS day_of_week
         , min(a.check_in_hour) AS check_in_hour
         , max(a.check_out_hour) AS check_out_hour
         FROM hr_attendance_raw_3 a
         GROUP BY a.employee_code, a.date
)

, ci_co_tz AS ( -- get timezone of employee
         SELECT 
                  e.id AS employee_id
                  , e.calendar_id
                  , wc.tz AS calendar_tz
                  , e.company_id
                  , cc.date
                  , cc.day_of_week
                  , cc.check_in_hour
                  , cc.check_out_hour
                  , ((cc.date::text || ' '::text) || cc.check_in_hour::text)::timestamp without time zone AS check_in
                  , ((cc.date::text || ' '::text) || cc.check_out_hour::text)::timestamp without time zone AS check_out
           FROM ci_co cc
             JOIN hr_employee e ON cc.employee_code = e.employee_code
             JOIN hr_working_calendar wc ON e.calendar_id = wc.id
)
, work_period AS ( -- transform data of table working calendar to easy to join
         SELECT 
                  wc.id AS calendar_id
                  , wc.name AS calendar_name
                  , wc.tz
                  , wcl.name AS period_name
                  , wcl.dayofweek
                  , wcl.day_period
                  , (wcl.hour_from * interval'1 hour')::time AS hour_from
                  , (wcl.hour_to * interval '1 hour')::time AS hour_to
                  , wcl.duration_days
         FROM hr_working_calendar wc
            LEFT JOIN hr_working_calendar_line wcl ON wc.id = wcl.calendar_id
)

, ci_co_tz_final AS ( -- join date with calendar on dayofweek to calculate
         SELECT 
                  ct.employee_id
                  , ct.calendar_id
                  , ct.calendar_tz
                  , ct.company_id
                  , ct.date AS date_employee_tz
                  , ct.check_in
                  , ct.check_out
                  , ((ct.date::text || ' ') || wp.hour_from::text)::timestamp without time zone AS hour_from -- hour_from according to regulations
                  , ((ct.date::text || ' ') || wp.hour_to::text)::timestamp without time zone AS hour_to -- hour_to according to regulations
                  , COALESCE(wp.duration_days, 0) AS duration_days -- meaning: how much working days is counted for each day_period?
           FROM ci_co_tz ct
             LEFT JOIN work_period wp ON ct.calendar_id = wp.calendar_id AND ct.day_of_week = wp.dayofweek::text
)

, daily_worked_hours AS ( -- calculate
         SELECT 
                  , c.employee_id
                  , c.calendar_id
                  , c.calendar_tz
                  , c.company_id
                  , c.date_employee_tz
                  , c.check_in
                  , c.check_out
                  , c.hour_from
                  , c.hour_to
                  , c.duration_days
                  , CASE
                    WHEN c.check_in IS NULL OR c.check_out IS NULL THEN '00:00:00'::interval
                    WHEN c.check_in < c.hour_to AND c.check_out > c.hour_from THEN LEAST(c.check_out, c.hour_to) - GREATEST(c.check_in, c.hour_from)
                    ELSE '00:00:00'::interval
                END AS worked_hours
                  , CASE
                    WHEN c.check_in IS NULL THEN 0
                    WHEN c.check_in >= c.hour_from THEN EXTRACT(epoch FROM (c.check_in - c.hour_from) / 60)
                    ELSE 0
                END AS late_minutes
                  , CASE
                    WHEN c.check_out IS NULL THEN 0
                    WHEN c.check_out <= c.hour_to THEN EXTRACT(epoch FROM (c.hour_to - c.check_out) / 60)
                    ELSE 0
                END AS early_minutes
                  , EXTRACT(epoch FROM COALESCE(c.hour_to - c.hour_from, '00:00:00'::interval)) AS working_hours
         FROM ci_co_tz_final c
         WHERE c.check_in IS NOT NULL OR c.check_out IS NOT NULL OR c.hour_from IS NOT NULL OR c.hour_to IS NOT NULL
)

, attendance_final AS ( -- calculate working_day
         SELECT
                  dwh.*
                  , CASE
                    WHEN dwh.working_hours = 0::numeric THEN 0
                    ELSE (EXTRACT(epoch FROM dwh.worked_hours) / dwh.working_hours) * dwh.duration_days
                END AS working_days
         FROM daily_worked_hours dwh
)

, hr_attendance_1 AS (
         SELECT 
                  t.employee_id
                  , t.company_id
                  , t.date_employee_tz
                  , sum(EXTRACT(epoch FROM t.hour_from)) AS hour_from
                  , sum(EXTRACT(epoch FROM t.hour_to)) AS hour_to
                  , COALESCE(EXTRACT(epoch FROM sum(t.worked_hours) FILTER (WHERE t.duration_days <> 0::double precision))::double precision / 3600::double precision, 0::double precision) AS worked_hours
                  , COALESCE(sum(t.late_minutes) FILTER (WHERE t.duration_days <> 0::double precision) - COALESCE(sum(t.late_minutes) FILTER (WHERE t.duration_days = 0::double precision), 0::bigint), 0::bigint) AS in_late
                  , COALESCE(sum(t.early_minutes) FILTER (WHERE t.duration_days <> 0::double precision) - COALESCE(sum(t.early_minutes) FILTER (WHERE t.duration_days = 0::double precision), 0::bigint), 0::bigint) AS out_early
                  , COALESCE(sum(t.working_days) FILTER (WHERE t.duration_days <> 0::double precision), 0::double precision) AS working_days
                  , COALESCE(sum(t.working_hours) FILTER (WHERE t.duration_days <> 0::double precision), 0::numeric)::double precision / 60::double precision AS working_minutes
         FROM attendance_final t
         GROUP BY t.employee_id, t.company_id, t.date_employee_tz
)
         
SELECT 
         c1.employee_id
         , c1.company_id
         , c1.calendar_id
         , c1.date AS date_employee_tz
         , c1.check_in - EXTRACT(hour FROM (CURRENT_TIMESTAMP AT TIME ZONE c1.calendar_tz) - (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) * '01:00:00'::interval AS check_in -- store in UTC timezone
         , c1.check_out - EXTRACT(hour FROM (CURRENT_TIMESTAMP AT TIME ZONE c1.calendar_tz) - (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) * '01:00:00'::interval AS check_out
         , CASE
                    WHEN c2.worked_hours < 0::double precision THEN 0::double precision
                    ELSE c2.worked_hours
         END AS worked_hours
         , CASE
                    WHEN c2.working_days < 0::double precision THEN 0::double precision
                    ELSE c2.working_days
         END AS working_days
         , CASE
                    WHEN c2.in_late < 0 THEN 0::bigint
                    WHEN c2.in_late::double precision > c2.working_minutes THEN 0::bigint
                    ELSE c2.in_late
         END AS in_late
         , CASE
                    WHEN c2.out_early < 0 THEN 0::bigint
                    WHEN c2.out_early::double precision > c2.working_minutes THEN 0::bigint
                    ELSE c2.out_early
         END AS out_early
         , 'accepted' as status
         , EXTRACT(hour FROM c1.check_in_hour::time) + EXTRACT(minute FROM c1.check_in_hour::time) / 60 as original_check_in
         , EXTRACT(hour FROM c1.check_out_hour::time) + EXTRACT(minute FROM c1.check_out_hour::time) / 60 as original_check_out
         , false as is_lock_complaint
FROM ci_co_tz c1
         LEFT JOIN hr_attendance_update c2 ON c1.employee_id = c2.employee_id AND c1.company_id = c2.company_id AND c1.date = c2.date_employee_tz;
