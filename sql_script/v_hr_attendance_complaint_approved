CREATE OR REPLACE VIEW public.v_hr_attendance_complaint_approved AS 

WITH request_approved_1 AS ( -- query approved complaint
  SELECT 
    ha.employee_id
    , h.user_id
    , h.company_id
    , h.attendance_id
    , ha.calendar_id
    , h.iar.date
    , CASE
  WHEN to_char(h.date, 'Day'::text) = 'Monday   ' THEN '0'
  WHEN to_char(h.date, 'Day'::text) = 'Tuesday  ' THEN '1'
  WHEN to_char(h.date, 'Day'::text) = 'Wednesday' THEN '2'
  WHEN to_char(h.date, 'Day'::text) = 'Thursday ' THEN '3'
  WHEN to_char(h.date, 'Day'::text) = 'Friday   ' THEN '4'
  WHEN to_char(h.date, 'Day'::text) = 'Saturday ' THEN '5'
        ELSE '6'
      END AS day_of_week
    , h.status
    , CASE
WHEN h.check_in = 24 THEN 23.9997222222
ELSE h.check_in
END AS check_in
    , CASE
WHEN h.check_out = 24 THEN 23.9997222222
ELSE h.check_out
END AS check_out
, h.attendance_create_date,
, rank() OVER (PARTITION BY h.attendance_id, h.date ORDER BY h.create_date DESC) AS rank_date -- rank to get the latest approved form 
  FROM hr_attendance_complaint h
  JOIN res_company rc ON h.company_id = rc.id
  JOIN hr_attendance ha ON ha.id = h.attendance_id
  WHERE h.status = 'approved' AND h.date IS NOT NULL AND h.check_in IS NOT NULL AND h.check_out IS NOT NULL AND h.check_in <= 24 AND h.check_out <= 24
)

, request_approved AS (
    SELECT r.*
    FROM request_approved_1 r
    WHERE r.rank_date = 1
)

, work_period AS ( -- recalculate similar to v_hr_attendance_raw_transform
    SELECT wc.id AS calendar_id,
            wc.name AS calendar_name,
            wc.tz,
            wcl.name AS period_name,
            wcl.dayofweek,
            wcl.day_period,
            wcl.hour_from,
            wcl.hour_to,
            wcl.duration_days
    FROM hr_working_calendar wc
    JOIN hr_working_calendar_line wcl ON wc.id = wcl.calendar_id
)

, attendance_approved AS (
SELECT *
FROM request_approved ra
LEFT JOIN work_period wp ON ra.calendar_id = wp.calendar_id AND ra.day_of_week = wp.dayofweek::text
)

, worked_hours AS (
         SELECT c.*,
                CASE
                    WHEN c.check_in IS NULL OR c.check_out IS NULL THEN 0::double precision
                    WHEN c.check_in < c.hour_to AND c.check_out > c.hour_from THEN LEAST(c.check_out, c.hour_to) - GREATEST(c.check_in, c.hour_from)
                    ELSE 0
                END AS worked_hours,
                CASE
                    WHEN c.check_in IS NULL THEN 0::double precision
                    WHEN c.check_in >= c.hour_from THEN (c.check_in - c.hour_from) * 60::double precision
                    ELSE 0
                END AS late_minutes,
                CASE
                    WHEN c.check_out IS NULL THEN 0::double precision
                    WHEN c.check_out <= c.hour_to THEN (c.hour_to - c.check_out) * 60::double precision
                    ELSE 0
                END AS early_minutes,
            COALESCE(c.hour_to - c.hour_from, 0) AS working_hours
           FROM attendance_approved c
)

, working_days AS (
         SELECT wh.*,
                CASE
                    WHEN wh.working_hours = 0 THEN 0
                    ELSE wh.worked_hours / wh.working_hours * wh.duration_days
                END AS working_days,
                CASE
                    WHEN wh.hour_from IS NULL AND wh.hour_to IS NULL THEN 'off_schedule'
                    ELSE 'accepted'
                END AS status_2
           FROM worked_hours wh
)

, attendance_request_final AS (
         SELECT t.employee_id,
            t.company_id,
            t.attendance_id,
            t.calendar_id,
            t.date,
            t.status_2 AS status,
            (t.check_in * interval '1 hour')::time AS check_in,
            (t.check_out * interval '1 hour')::time AS check_out,
            t.tz,
            COALESCE(sum(t.worked_hours) FILTER (WHERE t.duration_days <> 0::double precision), 0::double precision) AS worked_hours,
            COALESCE(sum(t.late_minutes) FILTER (WHERE t.duration_days <> 0::double precision) - COALESCE(sum(t.late_minutes) FILTER (WHERE t.duration_days = 0::double precision), 0::double precision), 0::double precision) AS in_late,
            COALESCE(sum(t.early_minutes) FILTER (WHERE t.duration_days <> 0::double precision) - COALESCE(sum(t.early_minutes) FILTER (WHERE t.duration_days = 0::double precision), 0::double precision), 0::double precision) AS out_early,
            COALESCE(sum(t.working_days) FILTER (WHERE t.duration_days <> 0::double precision), 0::double precision) AS working_days,
            COALESCE(sum(t.working_hours) FILTER (WHERE t.duration_days <> 0::double precision), 0::double precision) AS working_hours,
            COALESCE(sum(t.working_hours) FILTER (WHERE t.duration_days <> 0::double precision), 0::double precision) * 60::double precision AS working_minutes
           FROM working_days t
          GROUP BY t.employee_id, t.company_id, t.attendance_id, t.calendar_id, t.date, t.check_in, t.check_out, t.tz, t.status_2
        )
 SELECT arf.attendance_id,
    arf.employee_id,
    ha.date,
    (((arf.date::text || ' '::text) || arf.check_in::text)::timestamp without time zone) - EXTRACT(hour FROM (CURRENT_TIMESTAMP AT TIME ZONE arf.tz) - (CURRENT_TIMESTAMP AT TIME ZONE 'UTC')) * '01:00:00'::interval AS check_in,
    (((arf.date::text || ' '::text) || arf.check_out::text)::timestamp without time zone) - EXTRACT(hour FROM (CURRENT_TIMESTAMP AT TIME ZONE arf.tz) - (CURRENT_TIMESTAMP AT TIME ZONE 'UTC'))* '01:00:00'::interval AS check_out,
        CASE
            WHEN arf.worked_hours < 0::double precision THEN 0::double precision
            ELSE arf.worked_hours
        END AS worked_hours,
        CASE
            WHEN arf.in_late < 0::double precision THEN 0::double precision
            WHEN arf.in_late > arf.working_minutes THEN 0::double precision
            ELSE arf.in_late
        END AS in_late,
        CASE
            WHEN arf.out_early < 0::double precision THEN 0::double precision
            WHEN arf.out_early > arf.working_minutes THEN 0::double precision
            ELSE arf.out_early
        END AS out_early,
        CASE
            WHEN arf.working_days < 0::double precision THEN 0::double precision
            ELSE arf.working_days
        END AS working_days
   FROM attendance_request_final arf
     JOIN hr_attendance ha ON arf.attendance_id = ha.id;
